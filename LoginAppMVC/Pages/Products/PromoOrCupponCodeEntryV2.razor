@page "/promo_cupponCodeEntryv2/{key:guid?}"
@using Pms.Models.Entity.Setting
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0" data-anchor="data-anchor">
            <a class="btn btn-falcon-default btn-sm" @onclick="BackTo"><i class="fas fa-arrow-left"></i></a>
            Create Promo Or Cuppon Code
        </h5>
    </div>
    <EditForm Model="@promoOrCupponCode" OnValidSubmit="SaveOrUpdate">
        <DataAnnotationsValidator />

        <SuccessAlert Message="@SuccessMessage" Show="@showSuccessAlert" />
        <DangerAlert Message="@DangerMessage" Show="@showDangerAlert" OnClose="HideAlert" />
        <div class="card-body bg-body-tertiary">

            <div class="row">
                <div class="col-md-6">
                    <div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Promo Or CuppnName<span class="error-star">*</span></label>
                            <InputText @bind-Value="promoOrCupponCode.PromoOrCuppnName" type="text" class="form-control form-control-sm form-rounded" placeholder="Promo Or Cuppn Name" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.PromoOrCuppnName)" />
                        </div>
                    </div>
                    <div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Max Uses</label>
                            <InputNumber @bind-Value="promoOrCupponCode.MaxUses" type="password" class="form-control form-control-sm form-rounded " placeholder=" Max Uses" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.MaxUses)" />
                        </div>
                    </div>

                   
                    <div div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Discount <span class="error-star">*</span></label>
                            <InputNumber @bind-Value="promoOrCupponCode.Discount" type="number" class="form-control form-control-sm form-rounded " placeholder="Discount" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.Discount)" />
                        </div>
                    </div>
                    <div div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Valid From <span class="error-star">*</span></label>
                            <InputDate @bind-Value="promoOrCupponCode.ValidFrom" class="form-control form-control-sm form-rounded " placeholder="Valid From" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.ValidFrom)" />
                        </div>
                    </div>

                   

                </div>
              <div class="col-md-6">
                    <div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Code <span class="error-star">*</span></label>
                            <InputText @bind-Value="promoOrCupponCode.Code" type="text" class="form-control form-control-sm form-rounded " placeholder="Code" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.Code)" />
                        </div>
                    </div>

                    
                    <div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Remaining Uses</label>
                            <InputNumber @bind-Value="promoOrCupponCode.RemainingUses" type="password" class="form-control form-control-sm form-rounded " placeholder="Remaining Uses" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.RemainingUses)" />
                        </div>
                    </div>
                    <div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Description</label>
                            <InputText @bind-Value="promoOrCupponCode.Description" type="Text" class="form-control form-control-sm form-rounded " placeholder="Description"/>
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.Description)"/>
                        </div>
                    </div>
                    <div div class="col-sm-10">
                        <div class="form-group">
                            <label for="PromoOrCuppn" class="form-label fw-semi-bold"> Valid To <span class="error-star">*</span></label>
                            <InputDate @bind-Value="promoOrCupponCode.ValidTo" class="form-control form-control-sm form-rounded " placeholder="Valid To" />
                            <ValidationMessage class="text-left invalid-message-color" For="@(() => promoOrCupponCode.ValidTo)" />
                        </div>
                    </div>
              </div>


                <div>
                    <button type="submit" class="btn btn-primary btn-sm mt-2">@SubmitButtonText</button>
                    <button type="reset" class="btn btn-primary btn-sm mt-2">Refresh</button>

                </div>
            </div>
        </div>
    </EditForm>
</div>
<script>
    window.resetFileInput = function (id) {
        document.getElementById(id).value = '';
    }
</script>

@code {

    [Parameter]
    public Guid? key { get; set; }
    private bool IsEditMode => key.HasValue;
     private string SubmitButtonText => IsEditMode ? "Update" : "Save";

    [Inject]
    ProductOrCupponCodeService _productOrCupponCodeService { get; set; }
    PromoOrCupponCode promoOrCupponCode = new PromoOrCupponCode();//object or Model
 

    private IBrowserFile selectedImageFile;
    private bool showSuccessAlert = false;
    private bool showDangerAlert = false;

    public string SuccessMessage { get; set; }
    public string DangerMessage { get; set; }

    private string errorMessage;
    // private string defaultImage = "/assets/img/icons/profile_icon.jpg"; // Path to your default image
    // private string? imageData;

    protected override async void OnInitialized()
    {
        // imageData = defaultImage;


        if (IsEditMode)
        {
            if (key.HasValue)
            {

                promoOrCupponCode = await _productOrCupponCodeService.GetByKey(key.ToString());

                if (promoOrCupponCode == null)
                {
                    Navigation.NavigateTo("/UserInfo");
                }
                else
                {
                  //  imageData = user.UserImgLink;
                    StateHasChanged();
                }
            }
            else
            {
                promoOrCupponCode = new PromoOrCupponCode();

            }

        }
    }
    private async Task SaveOrUpdate()
    {
        try
        {
            if (selectedImageFile is not null)
            {
                // promoOrCupponCode.UserImgLink = await fileUploadService.UploadFileAsync(selectedImageFile, "assets/UserImage");
            }

            if (promoOrCupponCode.PromoOrCuppnId == 0)
            {
                promoOrCupponCode.EntryDateTime = DateTimeHelper.CurrentDateTime();
                promoOrCupponCode.EntryBy = UserInfo.UserId;


                promoOrCupponCode.PromoOrCuppnId = await _productOrCupponCodeService.SaveOrUpdate(promoOrCupponCode);
                if (promoOrCupponCode.PromoOrCuppnId > 0)
                {
                    showSuccessAlert = true;
                    SuccessMessage = MessageManager.SaveSuccess;
                    StateHasChanged(); // Notify Blazor to re-render the component
                                       //Hide the alert after 1 seconds

                    await Task.Delay(1000);
                    showSuccessAlert = false;
                }
                else if (promoOrCupponCode.PromoOrCuppnId == -1)
                {
                    showDangerAlert = true;
                    DangerMessage = $"{promoOrCupponCode.PromoOrCuppnName} {MessageManager.Exist}";
                }
                else
                {
                    showDangerAlert = true;
                    DangerMessage = MessageManager.SaveFaild;
                }
            }
            else
            {

                promoOrCupponCode.LastModifyDate = DateTimeHelper.CurrentDateTime();
                promoOrCupponCode.LastModifyBy = UserInfo.UserId;
                promoOrCupponCode.PromoOrCuppnId = await _productOrCupponCodeService.SaveOrUpdate(promoOrCupponCode);
                if (promoOrCupponCode.PromoOrCuppnId > 0)
                {
                    showSuccessAlert = true;
                    SuccessMessage = MessageManager.UpdateSuccess;
                    StateHasChanged(); // Notify Blazor to re-render the component
                                       //Hide the alert after 1 seconds

                    await Task.Delay(1000);
                    showSuccessAlert = false;
                }
                else
                {
                    showDangerAlert = true;
                    DangerMessage = MessageManager.UpdateFaild;
                }
            }


        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }


    private Task HideAlert()
    {
        showDangerAlert = false;
        return Task.CompletedTask;
    }
    // private async Task RemoveImage()
    // {
    //     imageData = defaultImage;
    //     await JS.InvokeVoidAsync("resetFileInput", "fileInput");
    // }



    // private async Task HandleSelected(InputFileChangeEventArgs e)
    // {
    //     selectedImageFile = e.File;
    //     var file = e.File;
    //     if (file != null)
    //     {
    //         using (var stream = new MemoryStream())
    //         {
    //             await file.OpenReadStream().CopyToAsync(stream);
    //             imageData = $"data:image/png;base64,{Convert.ToBase64String(stream.ToArray())}";
    //         }
    //     }
    // }


    private void BackTo()
    {
        Navigation.NavigateTo("/PromoOrCupponInfu");
    }


}