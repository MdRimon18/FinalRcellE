@page "/add_suppiler"
@inject IJSRuntime JS


<div class="card mb-3">
   <div class="card-header">
      <h5 class="mb-0" data-anchor="data-anchor">
         <i class="fas fa-arrow-left"></i>
         Supplier Profile Entry
      </h5>

   </div>
    <EditForm Model="@supplier" OnValidSubmit="SaveOrUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <SuccessAlert Message="@SuccessMessage" Show="@showSuccessAlert" />
        <DangerAlert Message="@DangerMessage" Show="@showDangerAlert" OnClose="HideAlert" />
    <div class="card-body bg-body-tertiary container">
        <div class="row">
            <div class="col-md-6">
                <div class="col-sm-10 col-md-10 ">
                    <div class="form-group">
                        <label for="addSupplier" class="label text-dark">Name<span class="error-star">*</span></label>
                        <InputText type="text"  @bind-Value="supplier.SupplrName" class="form-control form-control-sm form-rounded " placeholder="Enter Name" required/>
                        <div class="text-left invalid-message-color">
                            Name Required!
                        </div>

                    </div>
                </div>
                <div class="col-sm-10 col-md-10 ">
                    <div class="form-group">
                        <label for="addSupplier" class="label text-dark">Enter Mobile No <span class="error-star">*</span></label>
                        <InputText  type="text" @bind-Value="supplier.MobileNo" class="form-control form-control-sm form-rounded " placeholder="Enter Mobile No" required />
                        <div class="text-left invalid-message-color">
                            Mobile No Required!
                        </div>
                    </div>
                </div>
                <div class="col-sm-10 col-md-10">
                    <div class="form-group">
                        <label for="addSupplier" class="label text-dark">Email</label>
                         <InputText @bind-Value="supplier.Email" type="text" class="form-control form-control-sm form-rounded " placeholder="Write Email" required />

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="col-sm-10 col-md-10">
                    <div class="card-header">
                        <h5 class="mb-0">Upload Image</h5>
                    </div>
                    <div class="image-uploader">
                        <div class="image-preview">
                            <img src="@imageData"
                                 alt="Selected Image" style="width: 160px;height: 160px;" />
                            @if (imageData != defaultImage)
                            {
                                <button class="remove-button" @onclick="RemoveImage">X</button>
                            }
                        </div>

                        <InputFile class="file-input form-control form-control-sm form-rounded mb-2" OnChange="HandleSelected" id="fileInput" />
                    </div>
                </div>

                <div>
            </div>
        </div>
        </div>
        <div class="row">
                <div class="col-md-6">
                    <div class="col-sm-10 col-md-10 ">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark">Organization Name<span class="error-star">*</span> </label>
                            <InputText  @bind-Value="supplier.SuppOrgnznName" type="text" class="form-control form-control-sm form-rounded " placeholder="Organaization Name" required />
                            <div class="text-left invalid-message-color">
                                Organization Name Required!
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-10 col-md-10 ">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark"> Select Country <span class="error-star">*</span></label>
                            <select class="form-select form-rounded form-select-sm " id="selectCountry" required="">
                                 @foreach (var item in country_list)
                                {
                                  <option value=@item.CountryId>@item.CountryName</option>
                                }
                           </select>
                            <div class="text-left invalid-message-color">
                                Country Name Required!
                            </div>
                        </div>
                    </div>
                    
                   
                    <div class="col-sm-10 col-md-10 ">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark">Supplier Address One</label>
                         
                           <textarea rows="2"
                             
                                type="text" 
                                class="form-control form-control-sm form-rounded " 
                                placeholder="Supplier Address One"
                                required>
                           </textarea>
                            

                        </div>
                    </div>
                    <div class="col-sm-10 col-md-10">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark">Delivery Off Day</label>
                            <InputText @bind-Value="supplier.DeliveryOffDay" type="text" class="form-control form-control-sm form-rounded" placeholder="Delivery off Day" required />
                        </div>
                    </div>
                   
                </div>
                <div class="col-md-6">

                   
                    <div class="col-sm-10 col-md-10 ">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark">Select Business Type <span class="error-star">*</span></label>
                            <Input type="text" class="form-control form-control-sm form-rounded " placeholder="Select Business Type" required>
                            <div class="text-left invalid-message-color">
                                Select Type Required!
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-10 col-md-10 ">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark">State Name <span class="error-star">*</span></label>
                            <InputText @bind-Value="supplier.StateName" type="text" class="form-control form-control-sm form-rounded " placeholder="Enter Your State Name" required />
                            <div class="text-left invalid-message-color">
                                State Name Required!
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-10 col-md-10 ">
                        <div class="form-group">
                            <label for="addSupplier" class="label text-dark">Supplier Address two</label>
                            <textarea rows="2"
                                type="text"
                                class="form-control form-control-sm form-rounded"
                                placeholder="Supplier Address Two"
                                required>

                            </textarea>
                             
                        </div>
                    </div>
                </div>
                 
        </div>

        <button type="submit" class="btn btn-primary btn-sm mt-2">Save</button>
   </div>
    </EditForm>
</div>


 <script>
    window.resetFileInput = function (id) {
        document.getElementById(id).value = '';
    }
 </script>
@code {
    [Inject]
    CountryServiceV2 countryServiceV2 { get; set; }
    List<Pms.Models.Entity.Settings.CountryV2> country_list = new List<Pms.Models.Entity.Settings.CountryV2>();

    [Inject]
    SupplierService supplierService { get; set; }
    Pms.Models.Entity.Settings.Suppliers supplier = new Models.Entity.Settings.Suppliers();


    private bool showSuccessAlert = false;
    private bool showDangerAlert = false;

    public string SuccessMessage { get; set; }
    public string DangerMessage { get; set; }

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        country_list = (await countryServiceV2.Get(null, null, null, null, null, null, null, null, null, null, 1, 1000)).ToList();
    }


    private string defaultImage = "/assets/img/icons/profile_icon.jpg"; // Path to your default image
    private string? imageData;

    protected override void OnInitialized()
    {
        imageData = defaultImage;
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(stream);
                imageData = $"data:image/png;base64,{Convert.ToBase64String(stream.ToArray())}";
            }
        }
    }

    private async Task RemoveImage()
    {
        imageData = defaultImage;
        await JS.InvokeVoidAsync("resetFileInput", "fileInput");
    }


    private Task HideAlert()
    {
        showDangerAlert = false;
        return Task.CompletedTask;
    }
    private async Task SaveOrUpdate()
    {
        try
        {
            if (supplier.SupplierId == 0)
            {
                supplier.EntryDateTime = DateTimeHelper.CurrentDateTime();
                supplier.EntryBy = UserInfo.UserId;
                supplier.BranchId = CompanyInfo.BranchId;

                supplier.SupplierId = await supplierService.SaveOrUpdate(supplier);
                if (supplier.SupplierId > 0)
                {
                    showSuccessAlert = true;
                    SuccessMessage = MessageManager.SaveSuccess;
                    StateHasChanged(); // Notify Blazor to re-render the component
                                       //Hide the alert after 1 seconds

                    await Task.Delay(1000);
                    showSuccessAlert = false;
                }
                else if (supplier.SupplierId == -1)
                {
                    showDangerAlert = true;
                    DangerMessage = $"{supplier.SupplrName} {MessageManager.Exist}";
                }
                else
                {
                    showDangerAlert = true;
                    DangerMessage = MessageManager.SaveFaild;
                }
            }
            else
            {

                supplier.LastModifyDate = DateTimeHelper.CurrentDateTime();
                supplier.LastModifyBy = UserInfo.UserId;
                supplier.SupplierId = await supplierService.SaveOrUpdate(supplier);
                if (supplier.SupplierId > 0)
                {
                    showSuccessAlert = true;
                    SuccessMessage = MessageManager.UpdateSuccess;
                    StateHasChanged(); // Notify Blazor to re-render the component
                                       //Hide the alert after 1 seconds

                    await Task.Delay(1000);
                    showSuccessAlert = false;
                }
                else
                {
                    showDangerAlert = true;
                    DangerMessage = MessageManager.UpdateFaild;
                }
            }
         
            
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

}
