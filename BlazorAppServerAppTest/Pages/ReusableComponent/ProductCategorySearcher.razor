 @* <div class="search-box">  *@
    <div class="position-relative"> 
        <input class="form-select"
               type="search"
               placeholder="@Placeholder"
               aria-label="Search"
               @bind="SearchQuery"
               @onclick="OnInputClick"
               @oninput="OnSearchInput" />
      @*   <span class="fas fa-search search-box-icon"></span> *@
   </div>  

    @* <div class="btn-close-falcon-container position-absolute end-0 top-50 translate-middle shadow-none"
         style="display: @(ShowCloseIcon ? "block" : "none")">
        <button type="button" class="btn btn-link btn-close-falcon p-0" aria-label="Close" @onclick="ClearSearch"></button>
    </div> *@

<div class="dropdown-menu border font-base start-0 mt-2 py-0 overflow-hidden w-100"
     style="display: @(ShowDropdown && FilteredItems.Any() ? "block" : "none");">
    <div class="scrollbar list py-3" style="max-height: 24rem; cursor: pointer;">
        @if (FilteredItems.Any())
        {
            @foreach (var item in FilteredItems)
            {
                <a class="dropdown-item fs-10 px-x1 py-1 hover-primary" @onclick="() => SelectItem(item)">
                    <div class="d-flex align-items-center">
                        <div class="fw-semi-bold title" style="font-size: large;">@item.ProdCtgName</div>
                    </div>
                </a>
            }
        }
        else
        {
            <p class="fallback fw-bold fs-8">No Result Found.</p>
        }
    </div>
</div>

@* </div> *@
<script>
    function setupClickOutside(dotnetHelper) {
        document.addEventListener('click', function (event) {
            // Find the input and dropdown elements
            const searchInput = document.querySelector('.form-select');
            const dropdown = document.querySelector('.dropdown-menu');

            // Check if the clicked target is not the input or the dropdown
            if (searchInput && dropdown && !searchInput.contains(event.target) && !dropdown.contains(event.target)) {
                // Invoke the .NET method to hide the dropdown
                dotnetHelper.invokeMethodAsync('HideDropdown');
            }
        });
    }

</script>
@code {
    [Inject]
    public ProductCategoryService productCategoryService { get; set; }

    [Parameter]
    public EventCallback<ProductCategories> OnItemSelected { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Search categories...";

    [Parameter]
    public string InputSize { get; set; } = "width:13rem;";

    private string SearchQuery { get; set; } = string.Empty;
    private List<ProductCategories> FilteredItems { get; set; } = new List<ProductCategories>();
    private List<ProductCategories> Items { get; set; } = new List<ProductCategories>();
    private bool ShowDropdown { get; set; } = false;
    private bool ShowCloseIcon { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Fetch product categories on component initialization
        Items = (await productCategoryService.Get(null, null, null, null, 1, 1000)).ToList();
        FilteredItems = Items;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("setupClickOutside", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void HideDropdown()
    {
        ShowDropdown = false;
        StateHasChanged();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterItems();
        ShowCloseIcon = !string.IsNullOrEmpty(SearchQuery);
    }

    private void FilterItems()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredItems = Items;
        }
        else
        {
            FilteredItems = Items
                .Where(item => item.ProdCtgName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Ensure dropdown visibility depends on filtered items
        ShowDropdown = FilteredItems.Any();
    }

    private async Task SelectItem(ProductCategories item)
    {
        SearchQuery = item.ProdCtgName;
        ShowDropdown = false;
        ShowCloseIcon = true;

        if (OnItemSelected.HasDelegate)
        {
            await OnItemSelected.InvokeAsync(item);
        }
    }

    private void ClearSearch()
    {
        SearchQuery = string.Empty;
        ShowDropdown = false;
        ShowCloseIcon = false;
        FilteredItems = Items;
    }

    private void OnInputClick()
    {
      
        ShowDropdown = true;  // Forces the dropdown to show on input click
        StateHasChanged();  // Re-renders the component to apply changes
    }
}

