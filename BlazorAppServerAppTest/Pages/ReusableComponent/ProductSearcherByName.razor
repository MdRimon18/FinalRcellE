 @* 
<div class="position-relative">
    <input class="form-select"
           type="search"
           placeholder="@Placeholder"
           aria-label="Search"
           @bind="SearchQuery"
           @onclick="OnInputClick"
           @oninput="OnSearchInput" />
 
</div>

 
<div class="dropdown-menu border font-base start-0 mt-2 py-0 overflow-hidden w-100"
     style="display: @(ShowDropdown && FilteredItems.Any() ? "block" : "none");">
    <div class="scrollbar list py-3" style="max-height: 24rem; cursor: pointer;">
        @if (FilteredItems.Any())
        {
            @foreach (var item in FilteredItems)
            {
                <a class="dropdown-item fs-10 px-x1 py-1 hover-primary" @onclick="() => SelectItem(item)">
                    <div class="d-flex align-items-center">
                        <div class="fw-semi-bold title" style="font-size: large;">@item.ProdName</div>
                    </div>
                </a>
            }
        }
        else
        {
            <p class="fallback fw-bold fs-8">No Result Found.</p>
        }
    </div>
</div> *@
<div class="form-group">
    <label for="chooseProduct" class="form-label fw-semi-bold">Choose Product</label><span class="error-star">*</span>
    <div class="position-relative">
        <input class="form-control form-control-sm form-rounded search-input fw-semi-bold"
               type="search"
               placeholder="Search..."
               aria-label="Search"
               @bind="SearchQuery"
               @onclick="OnInputClick"
               @oninput="OnSearchInput" />
    </div>

    <div class="dropdown-menu border font-base start-0 mt-2 py-0 overflow-hidden w-100"
         style="display: @(ShowDropdown && FilteredItems.Any() ? "block" : "none");">
        <div class="scrollbar list py-3" style="max-height: 24rem; cursor: pointer;">
            @if (FilteredItems.Any())
            {
                @foreach (var item in FilteredItems)
                {
                    <a class="dropdown-item fs-10 px-x1 py-1 hover-primary" @onclick="() => SelectItem(item)">
                        <div class="d-flex align-items-center">
                            <div class="avatar avatar-l status-online me-2">
                                <img class="rounded-circle" src="assets/img/team/1.jpg" alt="" />

                            </div>
                            <div class="flex-1">
                                <h6 class="mb-0 title">@item.ProdName</h6>
                                <p class="fs-11 mb-0 d-flex">@item.ProductCode</p>
                            </div>
                          @*   <div class="fw-semi-bold title" style="font-size: large;">@item.ProdName</div> *@
                        </div>
                    </a>
                }
            }
            else
            {
                <p class="fallback fw-bold fs-8">No Result Found.</p>
            }
        </div>
    </div>
</div>

@* </div> *@
<script>
    function setupClickOutside(dotnetHelper) {
        document.addEventListener('click', function (event) {
            // Find the input and dropdown elements
            const searchInput = document.querySelector('.form-select');
            const dropdown = document.querySelector('.dropdown-menu');

            // Check if the clicked target is not the input or the dropdown
            if (searchInput && dropdown && !searchInput.contains(event.target) && !dropdown.contains(event.target)) {
                // Invoke the .NET method to hide the dropdown
                dotnetHelper.invokeMethodAsync('HideDropdown');
            }
        });
    }

</script>
@code {
    [Inject]
    public ProductService _productService { get; set; }

    [Parameter]
    public EventCallback<Products> OnItemSelected { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Search categories...";

    [Parameter]
    public string InputSize { get; set; } = "width:13rem;";

    private string SearchQuery { get; set; } = string.Empty;
    private List<Products> FilteredItems { get; set; } = new List<Products>();
    private List<Products> Items { get; set; } = new List<Products>();
    private bool ShowDropdown { get; set; } = false;
    private bool ShowCloseIcon { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Fetch product categories on component initialization
        Items = (await _productService.Get(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, GlobalPageConfig.PageNumber, GlobalPageConfig.PageSize)).ToList();
        FilteredItems = Items;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("setupClickOutside", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void HideDropdown()
    {
        ShowDropdown = false;
        StateHasChanged();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? string.Empty;
        FilterItems();
        ShowCloseIcon = !string.IsNullOrEmpty(SearchQuery);
    }

    private void FilterItems()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredItems = Items;
        }
        else
        {
            FilteredItems = Items
                .Where(item => item.ProdName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Ensure dropdown visibility depends on filtered items
        ShowDropdown = FilteredItems.Any();
    }

    private async Task SelectItem(Products item)
    {
        SearchQuery = item.ProdName;
        ShowDropdown = false;
        ShowCloseIcon = true;

        if (OnItemSelected.HasDelegate)
        {
            await OnItemSelected.InvokeAsync(item);
        }
    }

    private void ClearSearch()
    {
        SearchQuery = string.Empty;
        ShowDropdown = false;
        ShowCloseIcon = false;
        FilteredItems = Items;
    }

    private void OnInputClick()
    {

        ShowDropdown = true;  // Forces the dropdown to show on input click
        StateHasChanged();  // Re-renders the component to apply changes
    }
}

