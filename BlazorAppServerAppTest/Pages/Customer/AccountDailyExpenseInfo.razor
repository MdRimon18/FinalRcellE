@page "/accdaily_expense"

@inject NavigationManager Navigation



@* <div class="modal fade" id="staticBackdrop" data-bs-keyboard="false" data-bs-backdrop="static" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content border-0 rounded-3 shadow-lg">
          *@ 
          
          <div class="modal-header border-0">
           <h5 class="modal-title" id="staticBackdropLabel">Create Daily Expanse </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@accountsDailyExpanse" OnValidSubmit="SaveOrUpdate">
                    <DataAnnotationsValidator />
                   
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                               
                                <div class="col-md-4 mb-2">
                                    <div class="form-group">
                                        <label for="AccHeadId" class="form-label">Account Type</label>
                                        <InputNumber id="AccHeadId" class="form-control form-control-sm form-rounded" @bind-Value="accountsDailyExpanse.AccHeadId" />
                                        <ValidationMessage class="text-danger" For="@(() => accountsDailyExpanse.AccHeadId)" />
                                    </div>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <div class="form-group">
                                        <label for="Expense" class="form-label">Total Expense</label>
                                        <InputNumber id="Expense" class="form-control form-control-sm form-rounded" @bind-Value="accountsDailyExpanse.Expense" />
                                    </div>
                                </div>     
                                <div class="col-md-4 mb-3">
                                    <div class="form-group">
                                        <label for="Date" class="form-label">Date</label>
                                        <InputDate class="form-control form-control-sm form-rounded" @bind-Value="accountsDailyExpanse.Date" />
                                    </div>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <div class="form-group">
                                        <label for="Remarks" class="form-label">Remarks</label>
                                        <InputText id="Remarks" class="form-control form-control-sm form-rounded" @bind-Value="accountsDailyExpanse.Remarks" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer border-0">
                                <button type="submit" class="btn btn-primary btn-sm mt-2">Save</button>
                            </div>
                        </div>
                    </div>
                   
                </EditForm>
            </div>


@code {
    private AccountsDailyExpanse accountsDailyExpanse = new AccountsDailyExpanse();

    [Inject]
    AccountsDailyExpanseService accountsDailyExpanseService { get; set; }

    private string errorMessage;
    private async Task SaveOrUpdate()
    {
        try
        {
            if (accountsDailyExpanse.AccDailyExpanseId == 0)
            {
                accountsDailyExpanse.EntryDateTime = DateTimeHelper.CurrentDateTime();
                accountsDailyExpanse.EntryBy = UserInfo.UserId;
                accountsDailyExpanse.AccHeadId = 1;
                accountsDailyExpanse.AccDailyExpanseId = await accountsDailyExpanseService.SaveOrUpdate(accountsDailyExpanse);
                if (accountsDailyExpanse.AccDailyExpanseId > 0)
                {
                    toastService.ShowToast(MessageManager.SaveSuccess, ToastLevel.Success);
                }
                else if (accountsDailyExpanse.AccDailyExpanseId == -1)
                {
                    toastService.ShowToast($"{accountsDailyExpanse.AccHeadId} " + MessageManager.Exist, ToastLevel.Warning);
                }
                else
                {
                    toastService.ShowToast(MessageManager.SaveFaild, ToastLevel.Error);

                }
            }
            else
            {
                accountsDailyExpanse.LastModifyDate = DateTimeHelper.CurrentDateTime();
                accountsDailyExpanse.LastModifyBy = UserInfo.UserId;
                accountsDailyExpanse.AccDailyExpanseId = await accountsDailyExpanseService.SaveOrUpdate(accountsDailyExpanse);
                if (accountsDailyExpanse.AccDailyExpanseId > 0)
                {
                    toastService.ShowToast(MessageManager.UpdateSuccess, ToastLevel.Success);
                }
                else
                {
                    toastService.ShowToast(MessageManager.UpdateFaild, ToastLevel.Success);
                }
            }
            // Clear the form after save/update
           /*  await LoadDailyExp(); */ // Reload orders after save/update
            accountsDailyExpanse = new Pms.Data.Repository.Inventory.AccountsDailyExpanse();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
   
}
