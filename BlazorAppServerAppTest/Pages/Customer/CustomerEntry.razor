@page "/customer_entry/{key:guid?}"
@inject IJSRuntime JS
@inject NavigationManager Navigation


        <div class="col-lg-12 ps-lg-2 mb-2">
            <div class="row g-0 h-100 align-items-stretch">
                <div class="col-lg-12 mb-2">
                    <div class="card-body bg-body-tertiary pb-0">
                        <div class="collapse show">
                            <div class="card mb-3">
                        <div class="card-header">
                            <h5 class="mb-0" data-anchor="data-anchor">
                                <a class="btn btn-falcon-default btn-sm" @onclick="BackTo"><i class="fas fa-arrow-left"></i></a>
                                Customer Profile Entry
                            </h5>

                        </div>
                           <EditForm Model="@customer" OnValidSubmit="SaveOrUpdate">
                              <DataAnnotationsValidator />
                             
                                <SuccessAlert Message="@SuccessMessage" Show="@showSuccessAlert" />
                                <DangerAlert Message="@DangerMessage" Show="@showDangerAlert" OnClose="HideAlert" />
                          
                                <div class="card-body bg-body-tertiary">
                                    <div class="row">
                                         <div class="col-md-6">
                                             <div class="col-sm-10">
                                                     <div class="form-group">
                                                       <label for="name" class="label text-dark">Enter Name<span class="error-star">*</span></label>
                                                      <InputText @bind-Value="customer.CustomerName" type="text" class="form-control form-control-sm form-rounded" placeholder="Enter Name"  />

                                                    <ValidationMessage class="text-left invalid-message-color" For="@(() => customer.CustomerName)" />
                                                
                                                 </div>
                                            </div>
                                             <div class="col-sm-10">
                                                    <div class="form-group">
                                                        <label for="mobileNumber" class="label text-dark">Mobile Number<span class="error-star">*</span></label>
                                                        <InputText @bind-Value="customer.MobileNo" name="mobileNumber" type="tel" class="form-control form-control-sm form-rounded" placeholder="Enter Mobile Number"  />
                                                       <ValidationMessage class="text-left invalid-message-color" For="@(() => customer.MobileNo)" />
                                                    </div>
                                                </div>
                                              <div class="col-sm-10">
                                                     <div class="form-group">
                                                       <label for="email" class="label text-dark">Email</label>
                                                       <InputText @bind-Value="customer.Email"  name="email"   class="form-control form-control-sm form-rounded" placeholder="Write Email" />                                                   
                                                     </div>
                                                </div>
                                             <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="selectCountry" class="label text-dark">Select Country<span class="error-star">*</span></label>
                                                <InputSelect @bind-Value="customer.CountryId" class="form-select form-rounded form-select-sm ">
                                                    <option value="">Select Country</option>
                                                    @foreach (var item in country_list)
                                                    {
                                                        <option value="@item.CountryId">@item.CountryName</option>
                                                    }
                                                </InputSelect>
                                                <ValidationMessage class="text-left invalid-message-color" For="@(() => customer.CountryId)" />
                                            </div>


                                        </div>

                                        </div>                               
                                         <div class="col-md-6">
                                        <div class="col-sm-8 col-md-8">
                                            <div class="card-header">
                                                <h5 class="mb-0">Upload Image</h5>
                                            </div>
                                            <div class="image-uploader">
                                                <div class="image-preview">
                                                    <img src="@imageData"
                                                         alt="Selected Image" style="width: 160px;height: 160px;" />
                                                    @if (imageData != defaultImage)
                                                    {
                                                        <button type="button"class="remove-button" @onclick="RemoveImage">X</button>
                                                    }
                                                </div>

                                                <InputFile  class="file-input form-control form-control-sm form-rounded mt-2" OnChange="HandleSelected" id="fileInput" />
                                            </div>
                                        </div>
                                         
                                    </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="stateName" class="label text-dark">State Name</label>
                                                <InputText @bind-Value="customer.StateName" name="stateName" type="text" class="form-control form-control-sm form-rounded" placeholder="Enter Your State Name" />
                                            </div>
                                        </div>
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="occupation" class="label text-dark">Occupation</label>
                                                <InputText @bind-Value="customer.Occupation" name="occupation" type="text" class="form-control form-control-sm form-rounded" placeholder="Occupation" />
                                            </div>
                                        </div>
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="officeName" class="label text-dark">Office Name</label>
                                                <InputText @bind-Value="customer.OfficeName" name="officeName" type="text" class="form-control form-control-sm form-rounded" placeholder="Office Name" />
                                            </div>
                                        </div>
                                    </div>
                                        <div class="col-md-6">
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="addressLineOne" class="label text-dark">Address One</label>
                                                <InputTextArea rows="2" @bind-Value="customer.CustAddrssOne"
                                                               class="form-control form-control-sm form-rounded"
                                                               placeholder="Customer Address One" />

                                            </div>
                                        </div>
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="addressLineTwo" class="label text-dark">Address Two</label>

                                                <InputTextArea rows="2" @bind-Value="customer.CustAddrssTwo"
                                                               class="form-control form-control-sm form-rounded"
                                                               placeholder="Customer Address Two" />

                                            </div>
                                        </div>
                                             
                                      </div>
                                   
                                        </div>
                                <button class="btn btn-primary btn-sm mt-2" type="submit">@SubmitButtonText</button>
                                        <button type="reset" class="btn btn-primary btn-sm mt-2">Refresh</button> 
                                    </div>
                           </EditForm>   
                    </div>
                          
                            </div>
                            <div class="border-dashed-bottom my-4"></div>
                        </div>
                    </div>
                </div>
            </div>


<script>
    window.resetFileInput = function (id) {
        document.getElementById(id).value = '';
    }
</script>
@code {
    [Parameter]
    public Guid? key { get; set; }
    private bool IsEditMode => key.HasValue;
    private string SubmitButtonText => IsEditMode ? "Update" : "Create";
  

    [Inject]
    CountryServiceV2 countryServiceV2 { get; set; }
    List<CountryV2> country_list = new List<CountryV2>();

    private IBrowserFile selectedImageFile;

    [Inject]
    CustomerService customerService { get; set; }
    Customers customer = new Customers();

    [Inject]
    FileUploadService fileUploadService { get; set; }

    private bool showSuccessAlert = false;
    private bool showDangerAlert = false;

    public string SuccessMessage { get; set; }
    public string DangerMessage { get; set; }

    private string errorMessage;    

    private string defaultImage = "/assets/img/icons/profile_icon.jpg"; // Path to your default image
    private string? imageData;


    protected override async Task OnInitializedAsync()
    {
        
        imageData = defaultImage;

        country_list = (await countryServiceV2.Get(null, null, null, null, null, null, null, null, null, null, 1, 1000)).ToList();

        if (IsEditMode)
        {
            if (key.HasValue)
            {

                customer = await customerService.GetByKey(key.ToString());

                if (customer == null)
                {
                    Navigation.NavigateTo("/customer_info");
                }
                else
                {
                    imageData = customer.CustImgLink;
                }
            }
            else
            {
                customer = new Customers();
            }
       
        }
    }

   

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        selectedImageFile = e.File;
        if (file != null)
        {
            using (var stream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(stream);
                imageData = $"data:image/png;base64,{Convert.ToBase64String(stream.ToArray())}";
            }
        }
    }

    private async Task RemoveImage()
    {
        imageData = defaultImage;
        await JS.InvokeVoidAsync("resetFileInput", "fileInput");
    }
    private Task HideAlert()
    {
        showDangerAlert = false;
        return Task.CompletedTask;
    }
    private async Task SaveOrUpdate()
    {
        try
        {
            if (selectedImageFile is not null)
            {
                customer.CustImgLink = await fileUploadService.UploadFileAsync(selectedImageFile, "assets/CustomerImage");
            }
            if (customer.CustomerId == 0)
            {
               
                customer.EntryDateTime = DateTimeHelper.CurrentDateTime();
                customer.EntryBy = UserInfo.UserId;
                customer.BranchId = CompanyInfo.BranchId;

                customer.CustomerId = await customerService.SaveOrUpdate(customer);
                if (customer.CustomerId > 0)
                {
                    showSuccessAlert = true;
                    SuccessMessage = MessageManager.SaveSuccess;
                    StateHasChanged(); // Notify Blazor to re-render the component
                                       //Hide the alert after 1 seconds

                    await Task.Delay(1000);
                    showSuccessAlert = false;
                }
                else if (customer.CustomerId == -1)
                {
                    showDangerAlert = true;
                    DangerMessage = $"{customer.CustomerName} {MessageManager.Exist}";
                }
                else
                {
                    showDangerAlert = true;
                    DangerMessage = MessageManager.SaveFaild;
                }
            }
            else
            {

                customer.LastModifyDate = DateTimeHelper.CurrentDateTime();
                customer.LastModifyBy = UserInfo.UserId;
                customer.CustomerId = await customerService.SaveOrUpdate(customer);
                if (customer.CustomerId > 0)
                {
                    showSuccessAlert = true;
                    SuccessMessage = MessageManager.UpdateSuccess;
                    StateHasChanged(); // Notify Blazor to re-render the component
                                       //Hide the alert after 1 seconds

                    await Task.Delay(1000);
                    showSuccessAlert = false;
                }
                else
                {
                    showDangerAlert = true;
                    DangerMessage = MessageManager.UpdateFaild;
                }
            }


        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
    
    private void  BackTo()
    {
        Navigation.NavigateTo("/customer_info");
    }
}
